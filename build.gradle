apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'checkstyle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    ext {
        cucumberVersion = '1.2.5'
        springBootVersion = '1.5.2.RELEASE'
        aspectjVersion = "1.8.10"
        springVersion = "4.3.6.RELEASE"
        lombokVersion = "1.16.16"
        tomcatVersion = "8.5.11"
        checkStyleVersion = "7.0"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}
configurations {
    ajc
    aspects
    compile {
        extendsFrom aspects
    }
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

checkstyle {
    toolVersion = checkStyleVersion
}
checkstyleMain {
    configFile = rootProject.file('buildsupport/checkstyle/checkstyle-main.xml')
}
checkstyleTest {
    configFile = rootProject.file('buildsupport/checkstyle/checkstyle-test.xml')
}
checkstyleIntegrationTest {
    configFile = rootProject.file('buildsupport/checkstyle/checkstyle-test.xml')
}

repositories {
    mavenCentral()
}


def aspectj = { destDir, aspectPath, inpath, classpath ->
    ant.taskdef(resource: "org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties",
            classpath: configurations.ajc.asPath)

    ant.iajc(
            maxmem: "1024m", fork: "true", Xlint: "ignore",
            destDir: destDir,
            aspectPath: aspectPath,
            inpath: inpath,
            classpath: classpath,
            source: project.sourceCompatibility,
            target: project.targetCompatibility
    )
}

dependencies {
    compile(
            "org.projectlombok:lombok:${lombokVersion}",
            "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}",
            "org.springframework.boot:spring-boot-starter-web"
    )

    ajc "org.aspectj:aspectjtools:${aspectjVersion}"
    aspects "org.springframework:spring-aspects:${springVersion}"


    integrationTestCompile(
            "info.cukes:cucumber-java:${cucumberVersion}",
            "info.cukes:cucumber-junit:${cucumberVersion}",
            "info.cukes:cucumber-spring:${cucumberVersion}"
    )

    testCompile(
            'org.springframework.boot:spring-boot-starter-test',
    )
}

compileJava {
    doLast {
        aspectj project.sourceSets.main.output.classesDir.absolutePath,
                configurations.aspects.asPath,
                project.sourceSets.main.output.classesDir.absolutePath,
                project.sourceSets.main.runtimeClasspath.asPath
    }
}


task integrationTest(type: Test) {
    maxParallelForks = 4
    include 'com/foodie/au/testing/configuration/CucumberApplicationFeaturesTestConfigurer$*.class'
    systemProperties['soapui.logroot'] = project.buildDir.toString() + "/soaplog/"
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}
task performanceTest(type: Test) {
    include 'com/foodie/au/testing/configuration/CucumberPerformanceFeaturesTestConfigurer.class'
    systemProperties['soapui.logroot'] = project.buildDir.toString() + "/soaplog/"
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test